{
	"nodes":[
		{"id":"66f68f0934bc5b14","type":"text","text":"取得Form data以及更新Form的方式","x":-310,"y":-320,"width":250,"height":60},
		{"id":"c41994753b444b62","type":"text","text":"useRef","x":-865,"y":-116,"width":250,"height":60},
		{"id":"c403929e6a7d98fd","type":"text","text":"利用useRef參考HTMLInputElement\n\n```tsx\n\nlet nameRef = useRef<HTMLInputElement>(null);\n\nconst handleSubmit = (event: FormEvent) => {\n\tif(nameRef.current !== null)\n\t\tconsole.log(nameRef.current.value);\n}\n\nreturn(\n\t<form onSubmit={handleSubmit}> \n\t\t<label htmlFor=\"name\">\n\t\t<input ref{nameRef} id=\"name\" type=\"text\">\n\t</form>\n)\n```\n\n透過在input element中加入ref，來連結ref","x":-1260,"y":60,"width":480,"height":446},
		{"id":"a7df5506966ad083","type":"text","text":"\n```tsx\nlet [person, setPerson] = useState({\n\tname: '',\n\tage: 0\n})\n\nreturn(\n\t<form onSubmit={handleSubmit}> \n\t\t<div>\n\t\t\t<label htmlFor=\"name\">\n\t\t\t<input onChange={(event) => setPerson(...person, name: e.target.value) \n\t\t\t\tid=\"name\" \n\t\t\t\ttype=\"text\"\n\t\t\t\tvalue={person.name}\n\t\t\t>\n\t\t</div>\n\t\t<div>\n\t\t\t<label htmlFor=\"age\">\n\t\t\t<input onChange={(event) => setPerson(...person, age: parsInt(e.target.value)) \n\t\t\t\tid=\"age\" \n\t\t\t\ttype=\"text\"\n\t\t\t\tvalue={person.age}\n\t\t\t>\n\t\t</div>\n\t</form>\n)\n\n```\n\n像上面的例子中，透過useState來設定person的狀態，並且透過`onChange`來監聽input field的變化，而`value`的屬性則是用來確保input的狀態統一，因為原先沒有設定初始值的話，`e.target.value`會自己有一個狀態，而我們自己的state也是一個狀態，可能會造成`狀態不一致`，透過將`value`初始化為useState的`person`，這樣就可以同步狀態。","x":-660,"y":60,"width":775,"height":480},
		{"id":"b1814489210a3830","type":"text","text":"React-hook-form","x":360,"y":-116,"width":250,"height":60},
		{"id":"7e2da39584ade131","type":"text","text":"useState","x":-310,"y":-116,"width":250,"height":60},
		{"id":"79026c009871bcb8","type":"text","text":"# React","x":160,"y":-720,"width":250,"height":60},
		{"id":"dc3732f5887f5dff","type":"text","text":"## React Form","x":-310,"y":-500,"width":250,"height":60},
		{"id":"fcae9b36e60569bb","type":"text","text":"\n```tsx\nimport {useForm} from 'React-hook-form'\n\nlet {register, handleSubmit} = useForm{}\n\nconst handlerFunc = (data) =>{\n\t// what you want to do with data\n}\n\nreturn(\n\t<form onSubmit={handleSubmit(handlerFunc)}> \n\t\t<div>\n\t\t\t<label htmlFor=\"name\">\n\t\t\t<input \n\t\t\t\tid=\"name\" \n\t\t\t\ttype=\"text\"\n\t\t\t\t{...register('name')}\n\t\t\t>\n\t\t</div>\n\t\t<div>\n\t\t\t<label htmlFor=\"age\">\n\t\t\t<input onChange={\n\t\t\t\tid=\"age\" \n\t\t\t\ttype=\"text\"\n\t\t\t\t{...register('age')}\n\t\t\t>\n\t\t</div>\n\t</form>\n)\n\n```\n\n透過`useForm()`中的`register`來幫助我們在input element註冊屬性，讓我們不用像前面一樣需要自己額外再多打`value`、`onChange`等等屬性，但目前原理還不是相當理解，需要日後再進一步做查詢。","x":223,"y":60,"width":775,"height":540,"color":"6"},
		{"id":"e11f6ca0f5d2b5ca","type":"text","text":"## Dynamic render\n\n在react中，會利用JSX來作為component的回傳值。當我們要顯示像是list或table等等物件時，可以透過array method來將這些元素回傳，達到動態回傳的效果。\n\n```tsx\n return (\n\n        <>\n\n            <table className=\"table table-bordered\">\n                <thead>\n                <tr>\n\n                    <th scope=\"col\">Description</th>\n\n                    <th scope=\"col\">Amount</th>\n\n                    <th scope=\"col\">Quantity</th>\n\n                    <th scope=\"col\"></th>\n                </tr>\n                </thead>\n\n                <tbody>\n                    {items.map((item) => (<tr key={item.id}>\n                        <td>{item.description}</td>\n                        <td>{item.amount}</td>\n                        <td>{item.category}</td>\n                        <td>\n                            <button className=\"btn btn-danger\" onClick={() => onDelete(item.id)}>Delete</button>\n\n                        </td>\n                    </tr>))}\n                </tbody>              \n\n                <tfoot>\n\n                    <tr>\n\n                        <td>Total</td>\n\n                        <td>{items.reduce((total, item) => total + item.amount, 0)}</td>\n\n                        <td></td>\n\n                        <td></td>\n\n                    </tr>\n\n                </tfoot>\n\n            </table>\n\n        </>\n\n    )\n```","x":1140,"y":-690,"width":700,"height":850}
	],
	"edges":[
		{"id":"7d7e369d3ca3331f","fromNode":"66f68f0934bc5b14","fromSide":"bottom","toNode":"c41994753b444b62","toSide":"top"},
		{"id":"854da2fea82c1d5c","fromNode":"66f68f0934bc5b14","fromSide":"bottom","toNode":"7e2da39584ade131","toSide":"top"},
		{"id":"0263b2a50b9257a8","fromNode":"66f68f0934bc5b14","fromSide":"bottom","toNode":"b1814489210a3830","toSide":"top"},
		{"id":"921cdc313eca27ee","fromNode":"c41994753b444b62","fromSide":"bottom","toNode":"c403929e6a7d98fd","toSide":"top"},
		{"id":"0e48d6ec951d51e5","fromNode":"7e2da39584ade131","fromSide":"bottom","toNode":"a7df5506966ad083","toSide":"top"},
		{"id":"f61aa2b235312603","fromNode":"dc3732f5887f5dff","fromSide":"bottom","toNode":"66f68f0934bc5b14","toSide":"top"},
		{"id":"9747e55856a82aa5","fromNode":"79026c009871bcb8","fromSide":"left","toNode":"dc3732f5887f5dff","toSide":"top"},
		{"id":"9cdeb469a9c9447c","fromNode":"b1814489210a3830","fromSide":"bottom","toNode":"fcae9b36e60569bb","toSide":"top"}
	]
}